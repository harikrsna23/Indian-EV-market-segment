# -*- coding: utf-8 -*-
"""EV market Charging Stn Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A5aj9-y7L0QGHmeJxePx99p6wElkhrZm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import glob2

# Define the path to the dataset folder
dataset_folder = '/content/drive/MyDrive/AI ML  projects/Datasets/Dataset 1'

# Use glob to retrieve all CSV files in the dataset folder
csv_files = glob2.glob(dataset_folder + '/*.csv')
excel_files = glob2.glob(dataset_folder + '/*.xlsx')

# Create an empty list to store DataFrames
dfs = []

# Import each CSV file and append its DataFrame to the list
for file in csv_files:
    dfs.append(pd.read_csv(file))
for file in excel_files:
    dfs.append(pd.read_excel(file))

combined_df = pd.concat(dfs, ignore_index=True)

# Access each DataFrame from the list
for i, df in enumerate(dfs):
    print(f'DataFrame {i+1}:')
    print(df.head())  # Display the first few rows of the DataFrame
    print('\n')  # Add a newline for clarity

"""## Dataset 1"""

df_cs=dfs[0]

"""### Data cleaning and preprocessing (Charging Station)"""

df_cs.head(10)

df_cs.info()

df_cs.duplicated().sum()

df_cs=df_cs.drop_duplicates()

df_cs.isnull().sum()

df_cs=df_cs.dropna()

df_cs = df_cs.drop(columns=['address'], axis=1)

# Remove non-numeric characters (e.g., comma) from the 'lattitude' column
df_cs['lattitude'] = df_cs['lattitude'].str.replace(',', '')

# Convert the cleaned 'lattitude' column to float
df_cs['lattitude'] = df_cs['lattitude'].astype(float)

df_cs.describe(include='all')

df_cs['state'].value_counts()

# Standardize the case of state names to lowercase
df_cs['state'] = df_cs['state'].str.lower()

# Correct spelling mistakes and variations
corrections = {
    'andhra pradesh': 'andhra pradesh', 'andra pradesh': 'andhra pradesh', 'andhrapradesh':'andhra pradesh','rajahmundry':'andhra pradesh',
    'maharashtra':'maharashtra','maharashra':'maharashtra',
    'tamil nadu': 'tamil nadu', 'tamilnadu': 'tamil nadu', 'taminadu':'tamil nadu','pondicherry':'tamil nadu','puducherry':'tamil nadu',
    'telangana': 'telangana','telengana':'telangana','hyderabad':'telangana','hyderabadu00a0':'telangana',
    'kerala':'kerala','karala':'kerala','kochi':'kerala','ernakulam':'kerala',
    'rajasthan':'rajasthan','jajpur':'rajasthan','chikhali':'rajasthan',
    'haryana':'haryana','harayana':'haryana','chandigarh':'haryana','hisar':'haryana',
    'west bengal':'west bengal','westbengal':'west bengal',
    'odisha':'odisha','bhubhaneswar':'odisha',
    'uttarakhand':'uttarakhand','uttarkhand':'uttarakhand','uttrakhand':'uttarakhand',
    'chhattisgarh':'chhattisgarh','chattisgarh':'chhattisgarh',
    'jammu & kashmir':'jammu & kashmir','jammu':'jammu & kashmir',
    'gujarat':'gujarat','limbdi':'gujarat'

}

df_cs['state'] = df_cs['state'].replace(corrections)

# Remove leading and trailing whitespace
df_cs['state'] = df_cs['state'].str.strip()

# Display the cleaned state names
print(df_cs['state'].value_counts())

# Group the data by 'city' and count the number of charging stations in each city
city_counts = df_cs['city'].value_counts()

# Display the top 10 performing cities
top_cities = city_counts.head(30)
print(top_cities)

# Standardize the case of city names to lowercase
df_cs['city'] = df_cs['city'].str.lower()

# Correct spelling mistakes and variations of top cities only
corrections_topcities = {'delhi':'delhi','new delhi':'delhi',
               'bangalore':'bangalore','bengaluru':'bangalore','banglore':'bangalore',
               'thiruvananthapuram':'thiruvananthapuram','thiruvanthapuram':'thiruvananthapuram','trivandrum':'thiruvananthapuram'

}

df_cs['city'] = df_cs['city'].replace(corrections_topcities)

# Remove leading and trailing whitespace
df_cs['city'] = df_cs['city'].str.strip()

#updating the new correcting top performing cities
vc_cor_city=df_cs['city'].value_counts()
top_corrected_cities=vc_cor_city.head(30)

# Display the cleaned state names
print(top_corrected_cities)

"""### Univariate Analysis(Charging station)"""

plt.figure(figsize=(10, 8))

# Plot the first subplot
plt.subplot(2, 2, 1)
top_corrected_cities.plot(kind='bar')
plt.title('Distribution of Cities')

# Plot the second subplot
plt.subplot(2, 2, 2)
df_cs['state'].value_counts().plot(kind='bar')
plt.title('Distribution of States')

# Show the plots
plt.tight_layout()
plt.show()

"""### Geographical Distribution:"""

import folium
from folium.plugins import MarkerCluster


# Create a map centered around the mean latitude and longitude
#map_center = [df_cs['lattitude'].mean(), df_cs['longitude'].mean()]
charging_map = folium.Map(location=[20.5937, 78.9629], zoom_start=5)

# Create a MarkerCluster to group nearby markers
marker_cluster = MarkerCluster().add_to(charging_map)

# Add markers for each charging station
for index, row in df_cs.iterrows():
    folium.Marker([row['lattitude'], row['longitude']], popup=row['name']).add_to(marker_cluster)
# Display the map
charging_map.save('charging_stations_map.html')

charging_map

"""**Inferences:**
The map shows that the majority of charging stations are located in urban areas such as city centers and along major highways. This suggests that charging infrastructure is currently focused on serving densely populated areas and facilitating long-distance travel.

## Dataset 2
"""

dfs=dfs[1]

df.head()

# As there are too many columns, lets transpose the data to have the better view
df.head().T

"""#### Data cleaning and preprocessing"""

df.info()

df.isnull().sum()

drop_col=["logo_url","zone","contact_numbers","open","close"]
df=df.drop(columns=drop_col, axis=1)

# Calculate the percentage of missing values for each column
missing_percentage = df.isnull().mean() * 100

# Create a DataFrame with missing percentage information
missing_info = pd.DataFrame({'column': df.columns, 'missing_percentage': missing_percentage})

# Create a heatmap grid highlighting missing values percentage
plt.figure(figsize=(8, 6))
sns.heatmap(missing_info[['missing_percentage']], cmap='YlGnBu', annot=True, fmt='.2f', cbar_kws={'label': 'Missing Percentage'})
plt.title('Missing Values Percentage Heatmap')
plt.show()

columns_to_fill = ['capacity', 'cost_per_unit', 'power_type', 'total', 'type', 'vehicle_type', 'available']

for column in columns_to_fill:
    df[column].fillna(df[column].mode()[0], inplace=True)

# Replace 'Delhi' with 'New Delhi' in the 'city' column
df['city'] = df['city'].replace('Delhi', 'New Delhi')

# Make data consistent
df['staff'] = df['staff'].replace('Staffed', 'staffed')
df['staff'] = df['staff'].replace('UnStaffed', 'unstaffed')
df['staff'] = df['staff'].replace('Unstaffed', 'unstaffed')

df['country']=df['country'].str.strip()

"""### Data Visualization"""

# 1. Check the distribution of charging stations across different cities in India.
plt.figure(figsize=(12,4))
city_distribution = df['city'].value_counts()
city_distribution = np.log1p(city_distribution)
plt.bar(city_distribution.index, city_distribution.values, color='skyblue')
plt.title('Charging Stations Distribution Across Different Cities')
plt.ylabel('Number of Charging Stations')
plt.xticks( rotation=90)
plt.show

# 2. Explore the distribution of charging station types.
plt.figure(figsize=(4,4))
station_type_distribution = df['station_type'].value_counts()
plt.pie(station_type_distribution, labels=station_type_distribution.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('Set3'))
plt.title('Distribution of Charging Station Types')
plt.show()

# 3. Explore the distribution of stations that are staffed vs. unstaffed.
staff_distribution = df['staff'].value_counts()
plt.bar(staff_distribution.index, staff_distribution.values, color='seagreen')
plt.title('Distribution of Staffed vs. Unstaffed Charging Stations')
plt.ylabel('Number of Charging Stations')

# 4. Analyze the distribution of charging stations based on payment modes accepted.
payment_modes_distribution = df['payment_modes'].apply(lambda x: len(str(x).split(', ')) if pd.notnull(x) else 0)
payment_modes_distribution = np.log1p(payment_modes_distribution)
sns.histplot(payment_modes_distribution, bins=20, kde=True, color='darkkhaki')
plt.title('Distribution of Charging Stations Based on Payment Modes')
plt.xlabel('Number of Payment Modes Accepted')
plt.show()

"""#### Distribution of charging station type"""

# Create subplots for station type and power type
fig, axes = plt.subplots(1, 2, figsize=(10,5))

# Investigate the distribution of cost per unit across different station types
sns.countplot(x='station_type', data=df, palette='viridis', ax=axes[0])
axes[0].set_title('Distribution of Charging Stations by Station Type')
axes[0].set_xlabel('Station Type')
axes[0].set_ylabel('Count')
axes[0].tick_params(axis='x')

# Investigate the distribution of cost per unit across different power types
sns.countplot(x='power_type', data=df, palette='viridis', ax=axes[1])
axes[1].set_title('Distribution of Charging Stations by Power Type')
axes[1].set_xlabel('Power Type')
axes[1].set_ylabel('Count')
axes[1].tick_params(axis='x')

# Adjust layout
plt.tight_layout()
plt.show()

"""**Inferences:** The Distribution of Charging Stations by Station Type barplot reveals that the majority of charging stations are of the standard charging type, with a smaller number of swapable battery stations. Additionally, there is a notable difference in the distribution of power types, with more stations providing AC power than DC power. This distribution suggests a prevalent preference for standard charging infrastructure over battery-swapping solutions. The higher prevalence of AC power stations could be attributed to their compatibility with a broader range of electric vehicles, while the presence of DC power stations indicates a recognition of the need for faster-charging capabilities in certain locations.

#### Charging Station Capacity analysis
"""

capacity_counts = df['capacity'].value_counts()

# Apply logarithm transformation to count values
log_counts = np.log1p(capacity_counts)

# Plot the distribution of charging station capacity with log-transformed counts
plt.figure(figsize=(10, 6))
sns.barplot(x=log_counts.index, y=log_counts.values, palette="blend:#7AB,#EDA")
plt.title('Distribution of Charging Station Capacity (Log-Transformed Counts)')
plt.xlabel('Capacity (kW)')
plt.ylabel('Log-Transformed Count')
plt.xticks(rotation=90, ha='right')

# Adjust layout
plt.tight_layout()
plt.show()

"""**Inferences:** The above barplot illustrates that the majority of charging stations have a capacity of 3.3 kW or lower, with 142 kW being the next most common capacity, followed by 15 kW. This distribution suggests that many charging stations are designed to accommodate lower power requirements, likely catering to smaller vehicles with lower energy demands. However, the presence of charging stations with higher capacities, such as 142 kW, indicates a recognition of the need to support fast-charging capabilities for larger vehicles or to meet the demand for rapid charging in certain locations. Understanding this distribution of charging station capacities is essential for electric vehicle infrastructure planning and deployment, ensuring that charging facilities are appropriately sized and located to meet the diverse needs of electric vehicle users across different regions and vehicle types.

### Vendor Distribution:
"""

# Create a pivot table for city and vendor count
city_vendor_pivot = df.pivot_table(index='city', columns='vendor_name', values='uid', aggfunc='count', fill_value=0)

# Create a heatmap table
plt.figure(figsize=(12, 8))
sns.heatmap(city_vendor_pivot, annot=True, cmap='YlGnBu', cbar_kws={'label': 'Count'}, fmt='g')
plt.title('Heatmap Table: City vs. Vendor Count')
plt.xlabel('Vendor Name')
plt.ylabel('City')

# Adjust layout
plt.tight_layout()
plt.show()

"""**Inference:** Upon examining the information for each marker, it becomes evident that Vendor 'REVOS' operates a larger number of charging stations in urban area like Delhi, while Vendor 'EESL' has a stronger presence in suburban and rural regions. This indicates differing strategies among charging station providers based on target demographics and market segmentation.

#### Vehicle type analysis
"""

# Create a pie chart for the distribution of charging stations based on supported vehicle types
vehicle_type_counts = df['vehicle_type'].value_counts()

plt.figure(figsize=(10, 8))
plt.pie(vehicle_type_counts, labels=vehicle_type_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Charging Stations Based on Supported Vehicle Types')

# Show the plot
plt.show()

"""**Inference:** This Pie chart clearly shows that the majority of charging stations are built for 2-wheelers and 3-wheelers, accounting for over 77% of the total. In contrast, charging stations dedicated to 4-wheelers constitute just over 22%. This distribution underscores a significant focus on catering to the needs of smaller vehicles, such as motorcycles and auto-rickshaws, compared to larger vehicles like cars."""

